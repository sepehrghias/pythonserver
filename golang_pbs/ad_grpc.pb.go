// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/ad.proto

package Yektanet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdsWithCpcClient is the client API for AdsWithCpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdsWithCpcClient interface {
	GetAdByCpc(ctx context.Context, in *Ad_Request, opts ...grpc.CallOption) (*Ad_Reply, error)
}

type adsWithCpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAdsWithCpcClient(cc grpc.ClientConnInterface) AdsWithCpcClient {
	return &adsWithCpcClient{cc}
}

func (c *adsWithCpcClient) GetAdByCpc(ctx context.Context, in *Ad_Request, opts ...grpc.CallOption) (*Ad_Reply, error) {
	out := new(Ad_Reply)
	err := c.cc.Invoke(ctx, "/Yektanet.AdsWithCpc/get_ad_by_cpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdsWithCpcServer is the server API for AdsWithCpc service.
// All implementations must embed UnimplementedAdsWithCpcServer
// for forward compatibility
type AdsWithCpcServer interface {
	GetAdByCpc(context.Context, *Ad_Request) (*Ad_Reply, error)
	mustEmbedUnimplementedAdsWithCpcServer()
}

// UnimplementedAdsWithCpcServer must be embedded to have forward compatible implementations.
type UnimplementedAdsWithCpcServer struct {
}

func (UnimplementedAdsWithCpcServer) GetAdByCpc(context.Context, *Ad_Request) (*Ad_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdByCpc not implemented")
}
func (UnimplementedAdsWithCpcServer) mustEmbedUnimplementedAdsWithCpcServer() {}

// UnsafeAdsWithCpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdsWithCpcServer will
// result in compilation errors.
type UnsafeAdsWithCpcServer interface {
	mustEmbedUnimplementedAdsWithCpcServer()
}

func RegisterAdsWithCpcServer(s grpc.ServiceRegistrar, srv AdsWithCpcServer) {
	s.RegisterService(&AdsWithCpc_ServiceDesc, srv)
}

func _AdsWithCpc_GetAdByCpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ad_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsWithCpcServer).GetAdByCpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Yektanet.AdsWithCpc/get_ad_by_cpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsWithCpcServer).GetAdByCpc(ctx, req.(*Ad_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AdsWithCpc_ServiceDesc is the grpc.ServiceDesc for AdsWithCpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdsWithCpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Yektanet.AdsWithCpc",
	HandlerType: (*AdsWithCpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_ad_by_cpc",
			Handler:    _AdsWithCpc_GetAdByCpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ad.proto",
}
